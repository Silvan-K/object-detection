#!/usr/bin/env python3

import cv2
from argparse import ArgumentParser
from yolov5.utils.datasets import IMG_FORMATS
from detect import run
from glob import glob
from os import path

def label_convert(fname, line, img_height, img_width):
    items = line.split()
    clas = items[0]
    box_center_x = float(items[1])*img_width
    box_center_y = float(items[2])*img_height
    box_width = float(items[3])*img_width
    box_height = float(items[3])*img_height

    x1 = box_center_x - 0.5*box_width
    x2 = box_center_x + 0.5*box_width
    y1 = box_center_y - 0.5*box_height
    y2 = box_center_y + 0.5*box_height

    return f"{fname};{x1};{y1};{x2};{y2};{clas}"

if __name__ == "__main__":

    # Process command-line arguments
    parser = ArgumentParser()
    parser.add_argument("input_path", help=f"Path to the directory containing input images. All images with file extensions {IMG_FORMATS} will be processed")
    parser.add_argument("output_path", help="Output file path for object detection results in CSV format", nargs="?", default="results.csv")
    args = parser.parse_args()

    # Use 'detect.py' script from yolov5 to perform detection
    run(weights = "trained-models/yolov5m.pt",
        source = args.input_path,
        imgsz = [1280,1280],
        nosave = True,
        save_txt = True,
        exist_ok = True,
        name = "./",
        project = "./")
    
    # Process output text files generated by the 'run' function.
    # Expect one output file per input file. Gather input file names
    # here to loop over them and match them up later with their
    # corresponding output files
    infiles = glob(args.input_path+"/*")
    infiles = [fpath for fpath in infiles if fpath.split(".")[-1].lower() in IMG_FORMATS]

    # Create one output file with all detections aggregated as
    # specified in project requirements
    with open(args.output_path, "w") as outfile:

        for infile in infiles:

            # Need image dimensions for converting relative bounding
            # box coordinates to absolute coordinates
            img = cv2.imread(infile)
            img_height, img_width, _ = img.shape
            
            # Naming convention for yolov5 result files: one output
            # file per input image, stored in folder "labels" with
            # file extension replaced by ".txt"
            resfile = "labels/"+".".join(path.basename(infile).split(".")[:-1])+".txt"
            with open(resfile, "r") as readfile:
                for line in readfile:
                    outfile.write(label_convert(path.basename(infile),
                                                line, img_height, img_width))
