#!/usr/bin/env python3

import cv2
from argparse import ArgumentParser
from yolov5.utils.datasets import IMG_FORMATS
from detect import run
from glob import glob
from os import path

from helpers import LabelledBox

def filter_box_overlaps(boxes, threshold):
    """
    Filter out all boxes that are labelled 0 and overlap significantly
    (IOU value above the specified threshold) with any of the boxes
    labelled 1.

    """

    lenin_boxes = [box for box in boxes if box.label==1]
    other_boxes = [box for box in boxes if box.label==0]
    keep_other_boxes = []

    for o_box in other_boxes:
        overlaps = False
        for l_box in lenin_boxes:
            if LabelledBox.IOU(l_box, o_box, True) > threshold:
                overlaps = True
                break
        if not overlaps:
            keep_other_boxes.append(o_box)

    return lenin_boxes + keep_other_boxes

if __name__ == "__main__":

    # Process command-line arguments
    parser = ArgumentParser()
    parser.add_argument("input_path", help=f"Path to the directory containing input images. All images with file extensions {IMG_FORMATS} will be processed")
    parser.add_argument("output_path", help="Output file path for object detection results in CSV format", nargs="?", default="results.csv")
    args = parser.parse_args()

    # Use 'detect.py' script from yolov5 to perform detection
    run(weights = "trained-models/yolov5m.pt",
        source = args.input_path,
        imgsz = [1280,1280],
        nosave = True,
        save_txt = True,
        exist_ok = True,
        name = "./",
        project = "./")
    
    # Process output text files generated by the 'run' function.
    # Expect one output file per input file. Gather input file names
    # here to match them up with their corresponding output files
    # later
    infiles = glob(args.input_path+"/*")
    infiles = [fpath for fpath in infiles if fpath.split(".")[-1].lower() in IMG_FORMATS]

    # Create one output file with all detections aggregated as
    # specified in project requirements
    with open(args.output_path, "w") as outfile:

        for infile in infiles:

            # Need image dimensions for converting relative bounding
            # box coordinates to absolute coordinates
            img = cv2.imread(infile)
            img_height, img_width, _ = img.shape
            
            # Naming convention for yolov5 result files: one output
            # file per input image, stored in folder "labels" with
            # file extension replaced by ".txt"
            resfile = "labels/"+".".join(path.basename(infile).split(".")[:-1])+".txt"
            with open(resfile, "r") as readfile:

                # Parse all boxes for this image
                boxes = [LabelledBox.from_yolo_string(line, img_height, img_width)
                         for line in readfile]

                # Remove generic boxes that overlap with lenin boxes
                boxes = filter_box_overlaps(boxes, 0.9)

                # Dump results to text file
                for box in boxes:
                    outfile.write(f"{path.basename(infile)};{box.x0};{box.y0};{box.x1};{box.y1};{box.label}\n")
